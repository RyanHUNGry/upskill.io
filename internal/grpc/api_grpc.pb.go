// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InterviewService_CreateInterview_FullMethodName    = "/api.InterviewService/CreateInterview"
	InterviewService_CreateAnswer_FullMethodName       = "/api.InterviewService/CreateAnswer"
	InterviewService_ServiceHealthProbe_FullMethodName = "/api.InterviewService/ServiceHealthProbe"
)

// InterviewServiceClient is the client API for InterviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition containing the RPC methods
type InterviewServiceClient interface {
	// RPC to create an interview with a list of questions and the company name
	CreateInterview(ctx context.Context, in *CreateInterviewRequest, opts ...grpc.CallOption) (*GetInterview, error)
	// RPC to send a stream of answers and retrieve aggregated scores
	CreateAnswer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateAnswerRequest, GetAnswerScores], error)
	ServiceHealthProbe(ctx context.Context, in *Health, opts ...grpc.CallOption) (*Health, error)
}

type interviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterviewServiceClient(cc grpc.ClientConnInterface) InterviewServiceClient {
	return &interviewServiceClient{cc}
}

func (c *interviewServiceClient) CreateInterview(ctx context.Context, in *CreateInterviewRequest, opts ...grpc.CallOption) (*GetInterview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInterview)
	err := c.cc.Invoke(ctx, InterviewService_CreateInterview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) CreateAnswer(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateAnswerRequest, GetAnswerScores], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InterviewService_ServiceDesc.Streams[0], InterviewService_CreateAnswer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateAnswerRequest, GetAnswerScores]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InterviewService_CreateAnswerClient = grpc.ClientStreamingClient[CreateAnswerRequest, GetAnswerScores]

func (c *interviewServiceClient) ServiceHealthProbe(ctx context.Context, in *Health, opts ...grpc.CallOption) (*Health, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Health)
	err := c.cc.Invoke(ctx, InterviewService_ServiceHealthProbe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterviewServiceServer is the server API for InterviewService service.
// All implementations must embed UnimplementedInterviewServiceServer
// for forward compatibility.
//
// Service definition containing the RPC methods
type InterviewServiceServer interface {
	// RPC to create an interview with a list of questions and the company name
	CreateInterview(context.Context, *CreateInterviewRequest) (*GetInterview, error)
	// RPC to send a stream of answers and retrieve aggregated scores
	CreateAnswer(grpc.ClientStreamingServer[CreateAnswerRequest, GetAnswerScores]) error
	ServiceHealthProbe(context.Context, *Health) (*Health, error)
	mustEmbedUnimplementedInterviewServiceServer()
}

// UnimplementedInterviewServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInterviewServiceServer struct{}

func (UnimplementedInterviewServiceServer) CreateInterview(context.Context, *CreateInterviewRequest) (*GetInterview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterview not implemented")
}
func (UnimplementedInterviewServiceServer) CreateAnswer(grpc.ClientStreamingServer[CreateAnswerRequest, GetAnswerScores]) error {
	return status.Errorf(codes.Unimplemented, "method CreateAnswer not implemented")
}
func (UnimplementedInterviewServiceServer) ServiceHealthProbe(context.Context, *Health) (*Health, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceHealthProbe not implemented")
}
func (UnimplementedInterviewServiceServer) mustEmbedUnimplementedInterviewServiceServer() {}
func (UnimplementedInterviewServiceServer) testEmbeddedByValue()                          {}

// UnsafeInterviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterviewServiceServer will
// result in compilation errors.
type UnsafeInterviewServiceServer interface {
	mustEmbedUnimplementedInterviewServiceServer()
}

func RegisterInterviewServiceServer(s grpc.ServiceRegistrar, srv InterviewServiceServer) {
	// If the following call pancis, it indicates UnimplementedInterviewServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InterviewService_ServiceDesc, srv)
}

func _InterviewService_CreateInterview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).CreateInterview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_CreateInterview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).CreateInterview(ctx, req.(*CreateInterviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_CreateAnswer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InterviewServiceServer).CreateAnswer(&grpc.GenericServerStream[CreateAnswerRequest, GetAnswerScores]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InterviewService_CreateAnswerServer = grpc.ClientStreamingServer[CreateAnswerRequest, GetAnswerScores]

func _InterviewService_ServiceHealthProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Health)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).ServiceHealthProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_ServiceHealthProbe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).ServiceHealthProbe(ctx, req.(*Health))
	}
	return interceptor(ctx, in, info, handler)
}

// InterviewService_ServiceDesc is the grpc.ServiceDesc for InterviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.InterviewService",
	HandlerType: (*InterviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInterview",
			Handler:    _InterviewService_CreateInterview_Handler,
		},
		{
			MethodName: "ServiceHealthProbe",
			Handler:    _InterviewService_ServiceHealthProbe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateAnswer",
			Handler:       _InterviewService_CreateAnswer_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
