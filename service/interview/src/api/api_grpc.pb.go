// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InterviewService_CreateInterviewTemplateCall_FullMethodName      = "/api.InterviewService/CreateInterviewTemplateCall"
	InterviewService_CreateConductedInterviewCall_FullMethodName     = "/api.InterviewService/CreateConductedInterviewCall"
	InterviewService_GetConductedInterviewsByUserCall_FullMethodName = "/api.InterviewService/GetConductedInterviewsByUserCall"
	InterviewService_GetInterviewTemplatesByUserCall_FullMethodName  = "/api.InterviewService/GetInterviewTemplatesByUserCall"
	InterviewService_ConductInterviewCall_FullMethodName             = "/api.InterviewService/ConductInterviewCall"
)

// InterviewServiceClient is the client API for InterviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterviewServiceClient interface {
	CreateInterviewTemplateCall(ctx context.Context, in *CreateInterviewTemplate, opts ...grpc.CallOption) (*InterviewTemplate, error)
	CreateConductedInterviewCall(ctx context.Context, in *CreateConductedInterview, opts ...grpc.CallOption) (*ConductedInterview, error)
	GetConductedInterviewsByUserCall(ctx context.Context, in *GetConductedInterviewsByUser, opts ...grpc.CallOption) (*ConductedInterviews, error)
	GetInterviewTemplatesByUserCall(ctx context.Context, in *GetInterviewTemplatesByUser, opts ...grpc.CallOption) (*InterviewTemplates, error)
	ConductInterviewCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ConductInterviewRequest, ConductInterviewResponse], error)
}

type interviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInterviewServiceClient(cc grpc.ClientConnInterface) InterviewServiceClient {
	return &interviewServiceClient{cc}
}

func (c *interviewServiceClient) CreateInterviewTemplateCall(ctx context.Context, in *CreateInterviewTemplate, opts ...grpc.CallOption) (*InterviewTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InterviewTemplate)
	err := c.cc.Invoke(ctx, InterviewService_CreateInterviewTemplateCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) CreateConductedInterviewCall(ctx context.Context, in *CreateConductedInterview, opts ...grpc.CallOption) (*ConductedInterview, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConductedInterview)
	err := c.cc.Invoke(ctx, InterviewService_CreateConductedInterviewCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) GetConductedInterviewsByUserCall(ctx context.Context, in *GetConductedInterviewsByUser, opts ...grpc.CallOption) (*ConductedInterviews, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConductedInterviews)
	err := c.cc.Invoke(ctx, InterviewService_GetConductedInterviewsByUserCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) GetInterviewTemplatesByUserCall(ctx context.Context, in *GetInterviewTemplatesByUser, opts ...grpc.CallOption) (*InterviewTemplates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InterviewTemplates)
	err := c.cc.Invoke(ctx, InterviewService_GetInterviewTemplatesByUserCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interviewServiceClient) ConductInterviewCall(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ConductInterviewRequest, ConductInterviewResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InterviewService_ServiceDesc.Streams[0], InterviewService_ConductInterviewCall_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConductInterviewRequest, ConductInterviewResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InterviewService_ConductInterviewCallClient = grpc.BidiStreamingClient[ConductInterviewRequest, ConductInterviewResponse]

// InterviewServiceServer is the server API for InterviewService service.
// All implementations must embed UnimplementedInterviewServiceServer
// for forward compatibility.
type InterviewServiceServer interface {
	CreateInterviewTemplateCall(context.Context, *CreateInterviewTemplate) (*InterviewTemplate, error)
	CreateConductedInterviewCall(context.Context, *CreateConductedInterview) (*ConductedInterview, error)
	GetConductedInterviewsByUserCall(context.Context, *GetConductedInterviewsByUser) (*ConductedInterviews, error)
	GetInterviewTemplatesByUserCall(context.Context, *GetInterviewTemplatesByUser) (*InterviewTemplates, error)
	ConductInterviewCall(grpc.BidiStreamingServer[ConductInterviewRequest, ConductInterviewResponse]) error
	mustEmbedUnimplementedInterviewServiceServer()
}

// UnimplementedInterviewServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInterviewServiceServer struct{}

func (UnimplementedInterviewServiceServer) CreateInterviewTemplateCall(context.Context, *CreateInterviewTemplate) (*InterviewTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterviewTemplateCall not implemented")
}
func (UnimplementedInterviewServiceServer) CreateConductedInterviewCall(context.Context, *CreateConductedInterview) (*ConductedInterview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConductedInterviewCall not implemented")
}
func (UnimplementedInterviewServiceServer) GetConductedInterviewsByUserCall(context.Context, *GetConductedInterviewsByUser) (*ConductedInterviews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConductedInterviewsByUserCall not implemented")
}
func (UnimplementedInterviewServiceServer) GetInterviewTemplatesByUserCall(context.Context, *GetInterviewTemplatesByUser) (*InterviewTemplates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterviewTemplatesByUserCall not implemented")
}
func (UnimplementedInterviewServiceServer) ConductInterviewCall(grpc.BidiStreamingServer[ConductInterviewRequest, ConductInterviewResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ConductInterviewCall not implemented")
}
func (UnimplementedInterviewServiceServer) mustEmbedUnimplementedInterviewServiceServer() {}
func (UnimplementedInterviewServiceServer) testEmbeddedByValue()                          {}

// UnsafeInterviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterviewServiceServer will
// result in compilation errors.
type UnsafeInterviewServiceServer interface {
	mustEmbedUnimplementedInterviewServiceServer()
}

func RegisterInterviewServiceServer(s grpc.ServiceRegistrar, srv InterviewServiceServer) {
	// If the following call pancis, it indicates UnimplementedInterviewServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InterviewService_ServiceDesc, srv)
}

func _InterviewService_CreateInterviewTemplateCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterviewTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).CreateInterviewTemplateCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_CreateInterviewTemplateCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).CreateInterviewTemplateCall(ctx, req.(*CreateInterviewTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_CreateConductedInterviewCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConductedInterview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).CreateConductedInterviewCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_CreateConductedInterviewCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).CreateConductedInterviewCall(ctx, req.(*CreateConductedInterview))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_GetConductedInterviewsByUserCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConductedInterviewsByUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).GetConductedInterviewsByUserCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_GetConductedInterviewsByUserCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).GetConductedInterviewsByUserCall(ctx, req.(*GetConductedInterviewsByUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_GetInterviewTemplatesByUserCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterviewTemplatesByUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterviewServiceServer).GetInterviewTemplatesByUserCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InterviewService_GetInterviewTemplatesByUserCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterviewServiceServer).GetInterviewTemplatesByUserCall(ctx, req.(*GetInterviewTemplatesByUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _InterviewService_ConductInterviewCall_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InterviewServiceServer).ConductInterviewCall(&grpc.GenericServerStream[ConductInterviewRequest, ConductInterviewResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InterviewService_ConductInterviewCallServer = grpc.BidiStreamingServer[ConductInterviewRequest, ConductInterviewResponse]

// InterviewService_ServiceDesc is the grpc.ServiceDesc for InterviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InterviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.InterviewService",
	HandlerType: (*InterviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInterviewTemplateCall",
			Handler:    _InterviewService_CreateInterviewTemplateCall_Handler,
		},
		{
			MethodName: "CreateConductedInterviewCall",
			Handler:    _InterviewService_CreateConductedInterviewCall_Handler,
		},
		{
			MethodName: "GetConductedInterviewsByUserCall",
			Handler:    _InterviewService_GetConductedInterviewsByUserCall_Handler,
		},
		{
			MethodName: "GetInterviewTemplatesByUserCall",
			Handler:    _InterviewService_GetInterviewTemplatesByUserCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConductInterviewCall",
			Handler:       _InterviewService_ConductInterviewCall_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
