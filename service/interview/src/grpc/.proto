syntax = "proto3";
package api;

option go_package = "./api"; // relative path to the package

// all bytes are uuids which are 16 bytes long, and timeuuids are just uuids with time
message CreateInterviewTemplate {
    string company = 1;
    string role = 2;
    repeated string skills = 3;
    string description = 4;
    repeated string questions = 5;
    int user_id = 6;
}

message InterviewTemplate {
    bytes interview_template_id = 1;
    int average_score = 2;
    int average_rating = 3;
    int amount_conducted = 4;
    string company = 5;
    string role = 6;
    repeated string skills = 7;
    string description = 8;
    repeated string questions = 9;
    int user_id = 10;
}

message ResponseType {
    repeated string responses = 1;
    repeated string feedback = 2;
    repeated string questions = 3;
}

message CreateConductedInterview {
    bytes interview_template_id = 1;
    int user_id = 2;
    int score = 3;
    int rating = 4;
    string role = 5;
    ResponseType responses = 6;
}

message ConductedInterview {
    bytes conducted_interview_id = 1;
    bytes interview_template_id = 2;
    int user_id = 3;
    int score = 4;
    int rating = 5;
    string role = 6;
    ResponseType responses = 7;
}

message GetConductedInterviewsByUser {
    int user_id = 1;
    bytes conducted_interview_id = 2;
}

message GetInterviewTemplatesByCompany {
    string company = 1;
    bytes interview_template_id = 2;
}

message GetInterviewTemplatesByUser {
    int user_id = 1;
    bytes interview_template_id = 2;
}

message GetInterviewTemplatesByRole {
    string role = 1;
    bytes interview_template_id = 2;
}

service InterviewService {
    rpc CreateInterviewTemplate(CreateInterviewTemplate) returns (InterviewTemplate) {}
    rpc GetInterviewTemplatesByCompany(GetInterviewTemplatesByCompany) returns (InterviewTemplate) {}
    rpc GetInterviewTemplatesByUser(GetInterviewTemplatesByUser) returns (InterviewTemplate) {}
    rpc GetInterviewTemplatesByRole(GetInterviewTemplatesByRole) returns (InterviewTemplate) {}
    
    rpc CreateConductedInterview(CreateConductedInterview) returns (ConductedInterview) {}
    rpc GetConductedInterviewsByUser(GetConductedInterviewsByUser) returns (ConductedInterview) {}
}
