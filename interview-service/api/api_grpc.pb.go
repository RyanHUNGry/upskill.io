// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PromptServiceClient is the client API for PromptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromptServiceClient interface {
	GetPrompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error)
}

type promptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPromptServiceClient(cc grpc.ClientConnInterface) PromptServiceClient {
	return &promptServiceClient{cc}
}

func (c *promptServiceClient) GetPrompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*PromptResponse, error) {
	out := new(PromptResponse)
	err := c.cc.Invoke(ctx, "/PromptService/GetPrompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromptServiceServer is the server API for PromptService service.
// All implementations must embed UnimplementedPromptServiceServer
// for forward compatibility
type PromptServiceServer interface {
	GetPrompt(context.Context, *PromptRequest) (*PromptResponse, error)
	mustEmbedUnimplementedPromptServiceServer()
}

// UnimplementedPromptServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPromptServiceServer struct {
}

func (UnimplementedPromptServiceServer) GetPrompt(context.Context, *PromptRequest) (*PromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrompt not implemented")
}
func (UnimplementedPromptServiceServer) mustEmbedUnimplementedPromptServiceServer() {}

// UnsafePromptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromptServiceServer will
// result in compilation errors.
type UnsafePromptServiceServer interface {
	mustEmbedUnimplementedPromptServiceServer()
}

func RegisterPromptServiceServer(s grpc.ServiceRegistrar, srv PromptServiceServer) {
	s.RegisterService(&PromptService_ServiceDesc, srv)
}

func _PromptService_GetPrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromptServiceServer).GetPrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PromptService/GetPrompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromptServiceServer).GetPrompt(ctx, req.(*PromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PromptService_ServiceDesc is the grpc.ServiceDesc for PromptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PromptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PromptService",
	HandlerType: (*PromptServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrompt",
			Handler:    _PromptService_GetPrompt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// AnswerServiceClient is the client API for AnswerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnswerServiceClient interface {
	PostAnswer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*AnswerResponse, error)
}

type answerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnswerServiceClient(cc grpc.ClientConnInterface) AnswerServiceClient {
	return &answerServiceClient{cc}
}

func (c *answerServiceClient) PostAnswer(ctx context.Context, in *AnswerRequest, opts ...grpc.CallOption) (*AnswerResponse, error) {
	out := new(AnswerResponse)
	err := c.cc.Invoke(ctx, "/AnswerService/PostAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnswerServiceServer is the server API for AnswerService service.
// All implementations must embed UnimplementedAnswerServiceServer
// for forward compatibility
type AnswerServiceServer interface {
	PostAnswer(context.Context, *AnswerRequest) (*AnswerResponse, error)
	mustEmbedUnimplementedAnswerServiceServer()
}

// UnimplementedAnswerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnswerServiceServer struct {
}

func (UnimplementedAnswerServiceServer) PostAnswer(context.Context, *AnswerRequest) (*AnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAnswer not implemented")
}
func (UnimplementedAnswerServiceServer) mustEmbedUnimplementedAnswerServiceServer() {}

// UnsafeAnswerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnswerServiceServer will
// result in compilation errors.
type UnsafeAnswerServiceServer interface {
	mustEmbedUnimplementedAnswerServiceServer()
}

func RegisterAnswerServiceServer(s grpc.ServiceRegistrar, srv AnswerServiceServer) {
	s.RegisterService(&AnswerService_ServiceDesc, srv)
}

func _AnswerService_PostAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnswerServiceServer).PostAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnswerService/PostAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnswerServiceServer).PostAnswer(ctx, req.(*AnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnswerService_ServiceDesc is the grpc.ServiceDesc for AnswerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnswerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AnswerService",
	HandlerType: (*AnswerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostAnswer",
			Handler:    _AnswerService_PostAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
